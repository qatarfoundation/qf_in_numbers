.sequence-chart {
    position: absolute;
    top: calc(100vh - rem(38px, 'small'));
    right: rem(23px, 'small');
    display: none;
    padding-left: rem(28px, 'small');
    transform-origin: top right;
    transform: rotate3D(0, 0, 1, -90deg) translate3d(100%, -100%, 0);
    @include respond-to('medium') {
        top: calc(100vh - rem(38px, 'medium'));
        right: rem(23px, 'medium');
        display: flex;
        padding-left: rem(28px, 'medium');
    }
    @include respond-to('large') {
        top: calc(100vh - rem(38px, 'large'));
        right: rem(23px, 'large');
        padding-left: rem(28px, 'large');
    }
    .ar & {
        left: rem(28px, 'small');
        right: inherit;
        padding-left: 0;
        padding-right: rem(28px, 'small');
        transform-origin: top left;
        transform: rotate3D(0, 0, 1, 90deg) translate3d(-100%, -100%, 0);
        @include respond-to('medium') {
            left: rem(28px, 'medium');
            padding-right: rem(28px, 'medium');
        }
        @include respond-to('large') {
            left: rem(28px, 'large');
            padding-right: rem(28px, 'large');
        }
    }
    &::after, &::before {
        content: '';
        position: absolute;
        top: 50%;
        display: block;
        width: 0;
        height: 0;
        border-left: rem(4px, 'small') solid transparent;
        border-right: rem(4px, 'small') solid transparent;
        border-top: rem(4px, 'small') solid color-from-theme('green', 'secondary');
        transform: rotate3D(0, 0, 1, 90deg);
        @include respond-to('medium') {
            border-left: rem(4px, 'medium') solid transparent;
            border-right: rem(4px, 'medium') solid transparent;
            border-top: rem(4px, 'medium') solid color-from-theme('green', 'secondary');
        }
        @include respond-to('large') {
            border-left: rem(4px, 'large') solid transparent;
            border-right: rem(4px, 'large') solid transparent;
            border-top: rem(4px, 'large') solid color-from-theme('green', 'secondary');
        }
        .ar & {
            transform: rotate3D(0, 0, 1, -90deg);
        }
    }
    &::before {
        left: 0;
        .ar & {
            left: inherit;
            right: 0;
        }
    }
    &::after {
        left: rem(8px, 'small');
        @include respond-to('medium') {
            left: rem(8px, 'medium');
        }
        @include respond-to('large') {
            left: rem(8px, 'large');
        }
        .ar & {
            left: inherit;
            right: rem(8px, 'small');
            @include respond-to('medium') {
                right: rem(8px, 'medium');
            }
            @include respond-to('large') {
                right: rem(8px, 'large');
            }
        }
    }
}

.sequence-item {
    width: fit-content;
    padding-left: rem(12px, 'small');
    @include respond-to('medium') {
        padding-left: rem(12px, 'medium');
    }
    @include respond-to('large') {
        padding-left: rem(12px, 'large');
    }
    .ar & {
        padding-left: 0;
        padding-right: rem(12px, 'small');
        @include respond-to('medium') {
            padding-right: rem(12px, 'medium');
        }
        @include respond-to('large') {
            padding-right: rem(12px, 'large');
        }
    }
    &:not(:last-child) {
        padding-right: rem(12px, 'small');
        @include respond-to('medium') {
            padding-right: rem(12px, 'medium');
        }
        @include respond-to('large') {
            padding-right: rem(12px, 'large');
        }
        .ar & {
            padding-left: rem(12px, 'small');
            padding-right: 0;
            @include respond-to('medium') {
                padding-left: rem(12px, 'medium');
            }
            @include respond-to('large') {
                padding-left: rem(12px, 'large');
            }
        }
    }
    & > p {
        white-space: nowrap;
    }
}
